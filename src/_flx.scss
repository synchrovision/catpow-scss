@mixin flx($flx){
	$wvals:(n:nowrap,w:wrap,r:wrap-reverse);
	$wwvals:(n:single,w:multiple,r:multiple);
	$avals:(s:flex-start,e:flex-end,c:center,b:baseline,f:stretch);
	$jvals:(s:flex-start,e:flex-end,c:center,b:space-between,a:space-around);
	$dvals:(r:row,rr:row-reverse,c:column,cr:column-reverse);
	$wddvals:(r:normal,rr:reverse,c:normal,cc:reverse);
	$wdovals:(r:horizontal,rr:horizontal,c:vertical,cc:vertical);
	display:-webkit-box;
	display:-webkit-flex;
	display:flex;
	@each $key,$val in $flx{
		@if $key == w{
			-webkit-box-lines:map-get($wwvals,$val);
			-webkit-flex-wrap:map-get($wvals,$val);
			flex-wrap:map-get($wvals,$val);
		}
		@if $key == j or $key == jc{
			-webkit-justify-content:map-get($jvals,$val);
			justify-content:map-get($jvals,$val);
		}
		@if $key == v or $key == ac{
			-webkit-align-content:map-get($jvals,$val);
			align-content:map-get($jvals,$val);
		}
		@if $key == ji{
			-webkit-justify-items:map-get($jvals,$val);
			justify-items:map-get($jvals,$val);
		}
		@if $key == a or $key == ai{
			-webkit-align-items:map-get($avals,$val);
			align-items:map-get($avals,$val);
		}
		@if $key == d{
			-webkit-box-direction:map-get($wddvals,$val);
			-webkit-box-orient:map-get($wdovals,$val);
			-webkit-flex-direction:map-get($dvals,$val);
			flex-direction:map-get($dvals,$val);
		}
		@if $key == g{
			gap:szs($val);
		}
		@if $key == c{
			@if type-of($val) == 'list'{
				@include flex_equalize(nth($val,1),nth($val,2));
			}
			@else{@include flex_equalize($val);}
		}
	}
}

@mixin flex_equalize($cols) {
	$id:random(10000);
	&>*{
		flex-grow: 1;
		box-sizing: border-box;
	}
	@if $cols > 1{
		@for $l from 1 through $cols * 2{
			%c#{$l}c#{$id}{
				flex-basis: percentage(floor(100 / $l) / 100);
			}
		}

		&>*{
			@extend %c#{$cols - 1}c#{$id};
		}
		&>*:first-child:nth-last-child(#{$cols}n) {
			&,&~*{
				@extend %c#{$cols}c#{$id};
			}
		}
		@if $cols > 2{
			&>*:nth-child(#{$cols - 1}n):nth-last-child(#{$cols}n + 1)~*{
				@extend %c#{$cols}c#{$id};
			}
			$max_len: ($cols - 1) * ($cols - 2) - 1;
			@for $len from ceil($cols / 2) through $max_len {
				$r: ceil($len / $cols);
				$mod:$len % $cols;
				$mgn:$cols - $r - $mod;
				@if $mod < $mgn{
					$r: floor($len / $cols);
				}
				$l: ceil($len / $r);
				@if $l!=$cols {
					&>*:first-child:nth-last-child(#{$len}) {
						@if $len % $l == 0{
							&,&~*{
								@extend %c#{$l}c#{$id};
							}
						}
						@else{
							&,&~*{
								@extend %c#{$l - 1}c#{$id};
							}
							&~*:nth-child(#{$l - 1}n):nth-last-child(#{$l}n + 1)~*{
								@extend %c#{$l}c#{$id};
							}
						}
					}
				}
			}
		}
	}
}